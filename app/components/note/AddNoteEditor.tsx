"use client";

import { Note } from "@/app/interfaces";
import { useNoteContext } from "@/context/notes";
import { useKey } from "@/hooks/useKey";
import { motion } from "framer-motion";
import dynamic from "next/dynamic";
import { useRef, useState } from "react";

const EditorComp = dynamic(
  () => import("@/app/components/editor/AddEditorComponent"),
  {
    ssr: false,
    loading: () => <div className="h-[84px]"></div>,
  }
);

interface Props {
  isInEditor: boolean;
}

export const AddNoteEditor = ({ isInEditor }: Props) => {
  const [isTyping, setIsTyping] = useState(false);
  const [rawMarkdown, setRawMarkdown] = useState("");
  const [isSaving, setIsSaving] = useState(false);
  const editorRef = useRef(null) as any;
  const { addNote } = useNoteContext();

  function handleOnChange(markdown: string) {
    if (markdown.length > 0) {
      setIsTyping(true);
      setRawMarkdown(markdown);
      return;
    }

    setIsTyping(false);
  }

  function resetEditor() {
    // Get the contenteditable div and blur it, because MDXEditor doesn't have a blur method and it's necessary to blur it to remove the whitespace generated by the ctrl + enter
    const editor = document.querySelector(
      "div[contenteditable=true]"
    ) as HTMLElement;

    editor.blur();
    editorRef.current?.setMarkdown("");
    setRawMarkdown("");
    setIsTyping(false);
  }

  function handleSaveMessage(note: Note) {
    setIsSaving(true);
    setTimeout(() => {
      setIsSaving(false);
    }, 1000);

    setTimeout(() => {
      addNote(note);
    }, 1800);
  }

  useKey({
    key: "Enter",
    callback: (e: KeyboardEvent) => {
      if (e.ctrlKey && isInEditor && rawMarkdown.length > 0) {
        let newMarkdown = rawMarkdown;
        let unExpectedListEnd = "*\n";
        let unExpectedOrderedList = ".";
        const lastChar = newMarkdown.slice(-1);

        // This is for remove the (*) from the end of the Markdown
        if (unExpectedListEnd.includes(lastChar)) {
          newMarkdown = newMarkdown.slice(0, -1).trimEnd();
        }

        // This is for remove the (Number.) from the end of the Markdown
        if (unExpectedOrderedList.includes(lastChar)) {
          const regexOfOrderedList = /^\d+\./;
          const markdownSplit = newMarkdown.split("\n");
          const lastItem = markdownSplit[markdownSplit.length - 1];

          if (markdownSplit.length < 1) return;

          if (regexOfOrderedList.test(lastItem)) {
            newMarkdown = markdownSplit.slice(0, -1).join("\n");
          }
        }

        const newNote = {
          content: newMarkdown,
          id: Date.now().toString(),
          createdAt: new Date(),
        };
        handleSaveMessage(newNote);
        resetEditor();
      }
    },
  });

  return (
    <>
      {!isTyping && (
        <p className="absolute top-0 py-2 text-6xl italic transition-all duration-200 ease-in opacity-30 group-hover:opacity-10">
          Start typing here...
        </p>
      )}
      <EditorComp
        editorRef={editorRef}
        markdown={rawMarkdown}
        onChange={handleOnChange}
        className="mr-20"
      />
      <motion.div
        className="sticky top-full h-full transition-all duration-800 ease-in w-full text-center "
        initial={{ opacity: 0 }}
        animate={{ opacity: isTyping ? 1 : 0 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.2 }}
      >
        <div className="h-full w-full bg-[#ff5924] flex items-center justify-center p-1 rounded-md">
          <span className="text-sm" id="command-key"></span>
        </div>
      </motion.div>

      <motion.div
        className="absolute inset-0 transition-all duration-800 ease-in w-full text-center"
        style={{
          zIndex: isSaving ? 100 : -1,
        }}
        initial={{ opacity: 0, width: "0%" }}
        animate={{
          opacity: isSaving ? 1 : 0,
          width: isSaving ? "100%" : "90%",
        }}
        exit={{ opacity: 0, width: "90%" }}
        transition={{ duration: 0.2 }}
      >
        <div className="h-full w-full bg-[#ff5924] flex items-center justify-center p-1 rounded-md">
          <p className="text-md  text-white">I&apos;ll remember this for you</p>
        </div>
      </motion.div>
    </>
  );
};
